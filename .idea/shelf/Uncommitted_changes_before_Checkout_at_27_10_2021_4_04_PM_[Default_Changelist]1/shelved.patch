Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_09-Oct-21_12_37_AM_[Default_Changelist]1/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_09-Oct-21_12_37_AM_[Default_Changelist]1/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Checkout_at_09-Oct-21_12_37_AM_[Default_Changelist]1/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_09-Oct-21_12_37_AM_[Default_Changelist]1/shelved.patch	
+++ /dev/null	
@@ -1,81 +0,0 @@
-Index: .idea/deploymentTargetDropDown.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- .idea/deploymentTargetDropDown.xml	(date 1633702783811)
-+++ .idea/deploymentTargetDropDown.xml	(date 1633702783811)
-@@ -0,0 +1,17 @@
-+<?xml version="1.0" encoding="UTF-8"?>
-+<project version="4">
-+  <component name="deploymentTargetDropDown">
-+    <targetSelectedWithDropDown>
-+      <Target>
-+        <type value="QUICK_BOOT_TARGET" />
-+        <deviceKey>
-+          <Key>
-+            <type value="VIRTUAL_DEVICE_PATH" />
-+            <value value="D:\Edditing tools\SDK\AndroidStudio_SDK\platform-tools\.android\avd\Pixel_3_XL_API_28.avd" />
-+          </Key>
-+        </deviceKey>
-+      </Target>
-+    </targetSelectedWithDropDown>
-+    <timeTargetWasSelectedWithDropDown value="2021-10-06T18:29:16.351332300Z" />
-+  </component>
-+</project>
-\ No newline at end of file
-Index: .idea/gradle.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"GradleMigrationSettings\" migrationVersion=\"1\" />\r\n  <component name=\"GradleSettings\">\r\n    <option name=\"linkedExternalProjectsSettings\">\r\n      <GradleProjectSettings>\r\n        <option name=\"testRunner\" value=\"GRADLE\" />\r\n        <option name=\"distributionType\" value=\"DEFAULT_WRAPPED\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"modules\">\r\n          <set>\r\n            <option value=\"$PROJECT_DIR$\" />\r\n            <option value=\"$PROJECT_DIR$/app\" />\r\n          </set>\r\n        </option>\r\n        <option name=\"resolveModulePerSourceSet\" value=\"false\" />\r\n      </GradleProjectSettings>\r\n    </option>\r\n  </component>\r\n</project>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- .idea/gradle.xml	(revision 87a8f2767c58fc9f72ba841e490f278b161a7d19)
-+++ .idea/gradle.xml	(date 1633703579787)
-@@ -4,7 +4,7 @@
-   <component name="GradleSettings">
-     <option name="linkedExternalProjectsSettings">
-       <GradleProjectSettings>
--        <option name="testRunner" value="GRADLE" />
-+        <option name="testRunner" value="PLATFORM" />
-         <option name="distributionType" value="DEFAULT_WRAPPED" />
-         <option name="externalProjectPath" value="$PROJECT_DIR$" />
-         <option name="modules">
-@@ -14,6 +14,7 @@
-           </set>
-         </option>
-         <option name="resolveModulePerSourceSet" value="false" />
-+        <option name="useQualifiedModuleNames" value="true" />
-       </GradleProjectSettings>
-     </option>
-   </component>
-Index: app/src/main/java/com/example/mytravelbuddy/ui/map/GeoBroadcastReceiver.java
-===================================================================
---- app/src/main/java/com/example/mytravelbuddy/ui/map/GeoBroadcastReceiver.java	(date 1633702783795)
-+++ app/src/main/java/com/example/mytravelbuddy/ui/map/GeoBroadcastReceiver.java	(date 1633702783795)
-@@ -0,0 +1,13 @@
-+package com.example.mytravelbuddy.ui.map;
-+
-+import android.content.BroadcastReceiver;
-+import android.content.Context;
-+import android.content.Intent;
-+
-+public class GeoBroadcastReceiver extends BroadcastReceiver {
-+
-+    @Override
-+    public void onReceive(Context context, Intent intent) {
-+
-+    }
-+}
-Index: .idea/.gitignore
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- .idea/.gitignore	(date 1633702783825)
-+++ .idea/.gitignore	(date 1633702783825)
-@@ -0,0 +1,3 @@
-+# Default ignored files
-+/shelf/
-+/workspace.xml
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_09-Oct-21_12_37_AM__Default_Changelist_1.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_09-Oct-21_12_37_AM__Default_Changelist_1.xml b/.idea/shelf/Uncommitted_changes_before_Checkout_at_09-Oct-21_12_37_AM__Default_Changelist_1.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_09-Oct-21_12_37_AM__Default_Changelist_1.xml	
+++ /dev/null	
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Checkout_at_09-Oct-21_12_37_AM_[Default_Changelist]1" date="1633711084119" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_09-Oct-21_12_37_AM_[Default_Changelist]1/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Checkout at 09-Oct-21 12:37 AM [Default Changelist]" />
-</changelist>
\ No newline at end of file
Index: README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/README.md b/README.md
new file mode 100644
--- /dev/null	
+++ b/README.md	
@@ -0,0 +1,2 @@
+# MyTravelBuddy
+Huawei App
Index: app/src/main/java/com/example/mytravelbuddy/RequestLocationPermission.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/mytravelbuddy/RequestLocationPermission.java b/app/src/main/java/com/example/mytravelbuddy/RequestLocationPermission.java
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/example/mytravelbuddy/RequestLocationPermission.java	
@@ -0,0 +1,55 @@
+/*
+*       Copyright 2020. Huawei Technologies Co., Ltd. All rights reserved.
+
+        Licensed under the Apache License, Version 2.0 (the "License");
+        you may not use this file except in compliance with the License.
+        You may obtain a copy of the License at
+
+        http://www.apache.org/licenses/LICENSE-2.0
+
+        Unless required by applicable law or agreed to in writing, software
+        distributed under the License is distributed on an "AS IS" BASIS,
+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+        See the License for the specific language governing permissions and
+        limitations under the License.
+*/
+package com.example.mytravelbuddy;
+
+import android.Manifest;
+import android.app.Activity;
+import android.content.Context;
+import android.content.pm.PackageManager;
+import android.os.Build;
+import android.util.Log;
+
+import androidx.core.app.ActivityCompat;
+
+public class RequestLocationPermission {
+    public static final String TAG = "RequestPermission";
+    public static void requestLocationPermission(Context context) {
+        // check location permisiion
+        if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.P) {
+            Log.i(TAG, "sdk < 28 Q");
+            if (ActivityCompat.checkSelfPermission(context,
+                    Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED
+                    && ActivityCompat.checkSelfPermission(context,
+                    Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
+                String[] strings =
+                        {Manifest.permission.ACCESS_FINE_LOCATION, Manifest.permission.ACCESS_COARSE_LOCATION};
+                ActivityCompat.requestPermissions((Activity)context, strings, 1);
+            }
+        } else {
+            if (ActivityCompat.checkSelfPermission(context,
+                    Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED
+                    && ActivityCompat.checkSelfPermission(context,
+                    Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED
+                    && ActivityCompat.checkSelfPermission(context,
+                    "android.permission.ACCESS_BACKGROUND_LOCATION") != PackageManager.PERMISSION_GRANTED) {
+                String[] strings = {Manifest.permission.ACCESS_FINE_LOCATION,
+                        Manifest.permission.ACCESS_COARSE_LOCATION,
+                        "android.permission.ACCESS_BACKGROUND_LOCATION"};
+                ActivityCompat.requestPermissions((Activity)context, strings, 2);
+            }
+        }
+    }
+}
Index: app/src/main/java/com/example/mytravelbuddy/RequestLocationUpdatesWithCallbackActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/mytravelbuddy/RequestLocationUpdatesWithCallbackActivity.java b/app/src/main/java/com/example/mytravelbuddy/RequestLocationUpdatesWithCallbackActivity.java
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/com/example/mytravelbuddy/RequestLocationUpdatesWithCallbackActivity.java	
@@ -0,0 +1,249 @@
+/*
+*       Copyright 2020. Huawei Technologies Co., Ltd. All rights reserved.
+
+        Licensed under the Apache License, Version 2.0 (the "License");
+        you may not use this file except in compliance with the License.
+        You may obtain a copy of the License at
+
+        http://www.apache.org/licenses/LICENSE-2.0
+
+        Unless required by applicable law or agreed to in writing, software
+        distributed under the License is distributed on an "AS IS" BASIS,
+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+        See the License for the specific language governing permissions and
+        limitations under the License.
+*/
+package com.example.mytravelbuddy;
+
+import java.util.List;
+
+import com.example.mytravelbuddy.ui.Map_Activity;
+import com.huawei.hmf.tasks.OnFailureListener;
+import com.huawei.hmf.tasks.OnSuccessListener;
+import com.huawei.hmf.tasks.Task;
+
+import com.huawei.hms.common.ApiException;
+import com.huawei.hms.common.ResolvableApiException;
+import com.huawei.hms.location.FusedLocationProviderClient;
+import com.huawei.hms.location.LocationAvailability;
+import com.huawei.hms.location.LocationCallback;
+import com.huawei.hms.location.LocationRequest;
+import com.huawei.hms.location.LocationResult;
+import com.huawei.hms.location.LocationServices;
+import com.huawei.hms.location.LocationSettingsRequest;
+import com.huawei.hms.location.LocationSettingsResponse;
+import com.huawei.hms.location.LocationSettingsStatusCodes;
+import com.huawei.hms.location.SettingsClient;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.content.IntentSender;
+import android.content.pm.PackageManager;
+import android.location.Location;
+import android.os.Bundle;
+import android.os.Looper;
+import android.util.Log;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.widget.Toast;
+
+/**
+ * Example of Using requestLocationUpdates and removeLocationUpdates.
+ * Requests a location update and calls back on the specified Looper thread. This method requires that the requester process exist for continuous callback.
+ * If you still want to receive the callback after the process is killed, see requestLocationUpdates (LocationRequest request,PendingIntent callbackIntent)
+ */
+public class RequestLocationUpdatesWithCallbackActivity extends Activity implements OnClickListener {
+    public static final String TAG = "LocationUpdatesCallback";
+    LocationCallback mLocationCallback;
+    LocationRequest mLocationRequest;
+    private FusedLocationProviderClient mFusedLocationProviderClient;
+    private SettingsClient mSettingsClient;
+    public Double latitude,longitude;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_location_request_location_updates_callback);
+        RequestLocationPermission.requestLocationPermission(this);
+        // Button click listeners
+        findViewById(R.id.location_requestLocationUpdatesWithCallback).setOnClickListener(this);
+        findViewById(R.id.location_removeLocationUpdatesWithCallback).setOnClickListener(this);
+        findViewById(R.id.nextButton).setOnClickListener(this);
+//        addLogFragment();
+        mFusedLocationProviderClient = LocationServices.getFusedLocationProviderClient(this);
+        mSettingsClient = LocationServices.getSettingsClient(this);
+        mLocationRequest = new LocationRequest();
+        // Sets the interval for location update (unit: Millisecond)
+        mLocationRequest.setInterval(5000);
+        // Sets the priority
+        mLocationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);
+        if (null == mLocationCallback) {
+            mLocationCallback = new LocationCallback() {
+                @Override
+                public void onLocationResult(LocationResult locationResult) {
+                    if (locationResult != null) {
+                        List<Location> locations = locationResult.getLocations();
+                        if (!locations.isEmpty()) {
+                            for (Location location : locations) {
+                                Toast.makeText(RequestLocationUpdatesWithCallbackActivity.this,
+                                        "onLocationResult location[Longitude,Latitude,Accuracy]:" + location.getLongitude()
+                                                + "," + location.getLatitude() + "," + location.getAccuracy(), Toast.LENGTH_LONG).show();
+                                latitude=location.getLatitude();
+                                longitude=location.getLongitude();
+                            }
+                        }
+                    }
+                }
+
+
+                @Override
+                public void onLocationAvailability(LocationAvailability locationAvailability) {
+                    if (locationAvailability != null) {
+                        boolean flag = locationAvailability.isLocationAvailable();
+                        Log.i(TAG, "onLocationAvailability isLocationAvailable:" + flag);
+                    }
+                }
+            };
+        }
+    }
+
+    public Double getLat(){
+        return latitude;
+    }
+
+    public Double getLong(){
+        return longitude;
+    }
+
+    /**
+     * Requests a location update and calls back on the specified Looper thread.
+     */
+    private void requestLocationUpdatesWithCallback() {
+        try {
+            LocationSettingsRequest.Builder builder = new LocationSettingsRequest.Builder();
+            builder.addLocationRequest(mLocationRequest);
+            LocationSettingsRequest locationSettingsRequest = builder.build();
+            // Before requesting location update, invoke checkLocationSettings to check device settings.
+            Task<LocationSettingsResponse> locationSettingsResponseTask = mSettingsClient.checkLocationSettings(locationSettingsRequest);
+            locationSettingsResponseTask.addOnSuccessListener(new OnSuccessListener<LocationSettingsResponse>() {
+                @Override
+                public void onSuccess(LocationSettingsResponse locationSettingsResponse) {
+                    Log.i(TAG, "check location settings success");
+                    mFusedLocationProviderClient
+                            .requestLocationUpdates(mLocationRequest, mLocationCallback, Looper.getMainLooper())
+                            .addOnSuccessListener(new OnSuccessListener<Void>() {
+                                @Override
+                                public void onSuccess(Void aVoid) {
+                                    Toast.makeText(RequestLocationUpdatesWithCallbackActivity.this,  "requestLocationUpdatesWithCallback onSuccess", Toast.LENGTH_LONG).show();
+                                }
+                            })
+                            .addOnFailureListener(new OnFailureListener() {
+                                @Override
+                                public void onFailure(Exception e) {
+                                    Log.e(TAG,
+                                            "requestLocationUpdatesWithCallback onFailure:" + e.getMessage());
+                                }
+                            });
+                }
+            })
+                    .addOnFailureListener(new OnFailureListener() {
+                        @Override
+                        public void onFailure(Exception e) {
+                            Log.i(TAG,  "checkLocationSetting onFailure:" + e.getMessage());
+                            int statusCode = ((ApiException) e).getStatusCode();
+                            switch (statusCode) {
+                                case LocationSettingsStatusCodes.RESOLUTION_REQUIRED:
+                                    try {
+                                        //When the startResolutionForResult is invoked, a dialog box is displayed, asking you to open the corresponding permission.
+                                        ResolvableApiException rae = (ResolvableApiException) e;
+                                        rae.startResolutionForResult(RequestLocationUpdatesWithCallbackActivity.this, 0);
+                                    } catch (IntentSender.SendIntentException sie) {
+                                        Log.e(TAG, "PendingIntent unable to execute request.");
+                                    }
+                                    break;
+                                default:
+                                    break;
+                            }
+                        }
+                    });
+        } catch (Exception e) {
+            Log.i(TAG,  "requestLocationUpdatesWithCallback exception:" + e.getMessage());
+        }
+    }
+
+    @Override
+    protected void onDestroy() {
+        //Removed when the location update is no longer required.
+        removeLocationUpdatesWithCallback();
+        super.onDestroy();
+    }
+
+    /**
+     * Removed when the location update is no longer required.
+     */
+    private void removeLocationUpdatesWithCallback() {
+        try {
+            Task<Void> voidTask = mFusedLocationProviderClient.removeLocationUpdates(mLocationCallback);
+            voidTask.addOnSuccessListener(new OnSuccessListener<Void>() {
+                @Override
+                public void onSuccess(Void aVoid) {
+                    Toast.makeText(RequestLocationUpdatesWithCallbackActivity.this,"removeLocationUpdatesWithCallback onSuccess", Toast.LENGTH_LONG).show();
+                }
+            })
+                    .addOnFailureListener(new OnFailureListener() {
+                        @Override
+                        public void onFailure(Exception e) {
+                            Log.e(TAG,"removeLocationUpdatesWithCallback onFailure:" + e.getMessage());
+                        }
+                    });
+        } catch (Exception e) {
+            Log.i(TAG,  "removeLocationUpdatesWithCallback exception:" + e.getMessage());
+        }
+    }
+
+    @Override
+    public void onClick(View v) {
+        try {
+            switch (v.getId()) {
+                case R.id.location_requestLocationUpdatesWithCallback:
+                    requestLocationUpdatesWithCallback();
+                    break;
+                case R.id.location_removeLocationUpdatesWithCallback:
+                    removeLocationUpdatesWithCallback();
+                    break;
+                case R.id.nextButton:
+                    startActivity(new Intent(this, Map_Activity.class));
+
+                    break;
+
+                default:
+                    break;
+            }
+        } catch (Exception e) {
+            Log.e(TAG, "RequestLocationUpdatesWithCallbackActivity Exception:" + e);
+        }
+    }
+
+    @Override
+    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
+        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
+        if (requestCode == 1) {
+            if (grantResults.length > 1 && grantResults[0] == PackageManager.PERMISSION_GRANTED
+                    && grantResults[1] == PackageManager.PERMISSION_GRANTED) {
+                Log.i(TAG, "onRequestPermissionsResult: apply LOCATION PERMISSION successful");
+            } else {
+                Log.i(TAG, "onRequestPermissionsResult: apply LOCATION PERMISSSION  failed");
+            }
+        }
+
+        if (requestCode == 2) {
+            if (grantResults.length > 2 && grantResults[2] == PackageManager.PERMISSION_GRANTED
+                    && grantResults[0] == PackageManager.PERMISSION_GRANTED
+                    && grantResults[1] == PackageManager.PERMISSION_GRANTED) {
+                Log.i(TAG, "onRequestPermissionsResult: apply ACCESS_BACKGROUND_LOCATION successful");
+            } else {
+                Log.i(TAG, "onRequestPermissionsResult: apply ACCESS_BACKGROUND_LOCATION  failed");
+            }
+        }
+    }
+}
Index: app/proguard-rules.pro
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Add project specific ProGuard rules here.\r\n# You can control the set of applied configuration files using the\r\n# proguardFiles setting in build.gradle.\r\n#\r\n# For more details, see\r\n#   http://developer.android.com/guide/developing/tools/proguard.html\r\n\r\n# If your project uses WebView with JS, uncomment the following\r\n# and specify the fully qualified class name to the JavaScript interface\r\n# class:\r\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\r\n#   public *;\r\n#}\r\n\r\n# Uncomment this to preserve the line number information for\r\n# debugging stack traces.\r\n#-keepattributes SourceFile,LineNumberTable\r\n\r\n# If you keep the line number information, uncomment this to\r\n# hide the original source file name.\r\n#-renamesourcefileattribute SourceFile\r\n-ignorewarnings\r\n-keepattributes *Annotation*\r\n-keepattributes Exceptions\r\n-keepattributes InnerClasses\r\n-keepattributes Signature\r\n-keepattributes SourceFile,LineNumberTable\r\n#-keep class com.hianalytics.android.**{*;}\r\n#-keep class com.huawei.updatesdk.**{*;}\r\n#-keep class com.huawei.hms.**{*;}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n-keepattributes SourceFile,LineNumberTable\r\n#-keep class com.hianalytics.android.**{*;}\r\n#-keep class com.huawei.updatesdk.**{*;}\r\n#-keep class com.huawei.hms.**{*;}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/proguard-rules.pro b/app/proguard-rules.pro
--- a/app/proguard-rules.pro	
+++ b/app/proguard-rules.pro	
@@ -43,3 +43,11 @@
 #-keep class com.huawei.hms.**{*;}
 
 
+
+-keepattributes SourceFile,LineNumberTable
+-keep class com.hianalytics.android.**{*;}
+-keep class com.huawei.updatesdk.**{*;}
+-keep class com.huawei.hms.**{*;}
+
+
+
Index: app/agconnect-services.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n\t\"agcgw\":{\r\n\t\t\"backurl\":\"connect-dra.dbankcloud.cn\",\r\n\t\t\"url\":\"connect-dra.hispace.hicloud.com\",\r\n\t\t\"websocketbackurl\":\"connect-ws-dra.hispace.dbankcloud.cn\",\r\n\t\t\"websocketurl\":\"connect-ws-dra.hispace.dbankcloud.com\"\r\n\t},\r\n\t\"agcgw_all\":{\r\n\t\t\"CN\":\"connect-drcn.hispace.hicloud.com\",\r\n\t\t\"CN_back\":\"connect-drcn.dbankcloud.cn\",\r\n\t\t\"DE\":\"connect-dre.hispace.hicloud.com\",\r\n\t\t\"DE_back\":\"connect-dre.dbankcloud.cn\",\r\n\t\t\"RU\":\"connect-drru.hispace.hicloud.com\",\r\n\t\t\"RU_back\":\"connect-drru.dbankcloud.cn\",\r\n\t\t\"SG\":\"connect-dra.hispace.hicloud.com\",\r\n\t\t\"SG_back\":\"connect-dra.dbankcloud.cn\"\r\n\t},\r\n\t\"client\":{\r\n\t\t\"cp_id\":\"2640060000022923671\",\r\n\t\t\"product_id\":\"737518067793594768\",\r\n\t\t\"client_id\":\"726967393108116416\",\r\n\t\t\"client_secret\":\"50743EE03AD2D53C15FA17C9AE02AABC55B8D8A63749ADFC8544DF2FA5559093\",\r\n\t\t\"project_id\":\"737518067793594768\",\r\n\t\t\"app_id\":\"104790083\",\r\n\t\t\"api_key\":\"CwEAAAAA87ygm62CxaYAnCnmLDj8LNdgxZ9Gt+/zTKg5oQDMsbJtWX/zNvzvhQN6gyEZKOWnoEQnrVwrDpT57bq0EZelxL3A9BE=\",\r\n\t\t\"package_name\":\"com.example.mytravelbuddy\"\r\n\t},\r\n\t\"oauth_client\":{\r\n\t\t\"client_id\":\"104790083\",\r\n\t\t\"client_type\":1\r\n\t},\r\n\t\"app_info\":{\r\n\t\t\"app_id\":\"104790083\",\r\n\t\t\"package_name\":\"com.example.mytravelbuddy\"\r\n\t},\r\n\t\"service\":{\r\n\t\t\"analytics\":{\r\n\t\t\t\"collector_url\":\"datacollector-dra.dt.hicloud.com,datacollector-dra.dt.dbankcloud.cn\",\r\n\t\t\t\"resource_id\":\"p1\",\r\n\t\t\t\"channel_id\":\"\"\r\n\t\t},\r\n\t\t\"search\":{\r\n\t\t\t\"url\":\"https://search-dra.cloud.huawei.com\"\r\n\t\t},\r\n\t\t\"cloudstorage\":{\r\n\t\t\t\"storage_url\":\"https://ops-dra.agcstorage.link\"\r\n\t\t},\r\n\t\t\"ml\":{\r\n\t\t\t\"mlservice_url\":\"ml-api-dra.ai.dbankcloud.com,ml-api-dra.ai.dbankcloud.cn\"\r\n\t\t}\r\n\t},\r\n\t\"region\":\"SG\",\r\n\t\"configuration_version\":\"3.0\",\r\n\t\"appInfos\":[\r\n\t\t{\r\n\t\t\t\"package_name\":\"com.example.mytravelbuddy\",\r\n\t\t\t\"client\":{\r\n\t\t\t\t\"app_id\":\"104790083\"\r\n\t\t\t},\r\n\t\t\t\"app_info\":{\r\n\t\t\t\t\"package_name\":\"com.example.mytravelbuddy\",\r\n\t\t\t\t\"app_id\":\"104790083\"\r\n\t\t\t},\r\n\t\t\t\"oauth_client\":{\r\n\t\t\t\t\"client_type\":1,\r\n\t\t\t\t\"client_id\":\"104790083\"\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/agconnect-services.json b/app/agconnect-services.json
--- a/app/agconnect-services.json	
+++ b/app/agconnect-services.json	
@@ -1,19 +1,19 @@
 {
 	"agcgw":{
-		"backurl":"connect-dra.dbankcloud.cn",
-		"url":"connect-dra.hispace.hicloud.com",
+		"backurl":"connect-dra.hispace.hicloud.com",
+		"url":"connect-dra.dbankcloud.cn",
 		"websocketbackurl":"connect-ws-dra.hispace.dbankcloud.cn",
 		"websocketurl":"connect-ws-dra.hispace.dbankcloud.com"
 	},
 	"agcgw_all":{
-		"CN":"connect-drcn.hispace.hicloud.com",
-		"CN_back":"connect-drcn.dbankcloud.cn",
-		"DE":"connect-dre.hispace.hicloud.com",
-		"DE_back":"connect-dre.dbankcloud.cn",
-		"RU":"connect-drru.hispace.hicloud.com",
-		"RU_back":"connect-drru.dbankcloud.cn",
-		"SG":"connect-dra.hispace.hicloud.com",
-		"SG_back":"connect-dra.dbankcloud.cn"
+		"CN":"connect-drcn.dbankcloud.cn",
+		"CN_back":"connect-drcn.hispace.hicloud.com",
+		"DE":"connect-dre.dbankcloud.cn",
+		"DE_back":"connect-dre.hispace.hicloud.com",
+		"RU":"connect-drru.dbankcloud.cn",
+		"RU_back":"connect-drru.hispace.hicloud.com",
+		"SG":"connect-dra.dbankcloud.cn",
+		"SG_back":"connect-dra.hispace.hicloud.com"
 	},
 	"client":{
 		"cp_id":"2640060000022923671",
@@ -36,6 +36,10 @@
 	"service":{
 		"analytics":{
 			"collector_url":"datacollector-dra.dt.hicloud.com,datacollector-dra.dt.dbankcloud.cn",
+			"collector_url_ru":"datacollector-drru.dt.hicloud.com,datacollector-drru.dt.dbankcloud.cn",
+			"collector_url_sg":"datacollector-dra.dt.hicloud.com,datacollector-dra.dt.dbankcloud.cn",
+			"collector_url_de":"datacollector-dre.dt.hicloud.com,datacollector-dre.dt.dbankcloud.cn",
+			"collector_url_cn":"datacollector-drcn.dt.hicloud.com,datacollector-drcn.dt.dbankcloud.cn",
 			"resource_id":"p1",
 			"channel_id":""
 		},
Index: app/src/main/res/layout/activity_location_request_location_updates_callback.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/activity_location_request_location_updates_callback.xml b/app/src/main/res/layout/activity_location_request_location_updates_callback.xml
new file mode 100644
--- /dev/null	
+++ b/app/src/main/res/layout/activity_location_request_location_updates_callback.xml	
@@ -0,0 +1,47 @@
+<!--
+  ~ Copyright (c) Huawei Technologies Co., Ltd. 2019-2019. All rights reserved.
+  -->
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:focusable="true"
+    android:focusableInTouchMode="true"
+    tools:context=".RequestLocationUpdatesWithCallbackActivity">
+
+    <ScrollView
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content">
+
+        <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:focusable="true"
+            android:focusableInTouchMode="true"
+            android:orientation="vertical">
+
+            <TextView
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:text="location updates" />
+
+            <Button
+                android:id="@+id/location_requestLocationUpdatesWithCallback"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:text="requestLocationUpdates with callback" />
+
+            <Button
+                android:id="@+id/location_removeLocationUpdatesWithCallback"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:text="removeLocationUpdates with callback" />
+            <Button
+                android:id="@+id/nextButton"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:text="go to map" />
+        </LinearLayout>
+    </ScrollView>
+
+</LinearLayout>
Index: app/src/main/res/drawable/ic_baseline_arrow_circle_up_24.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable/ic_baseline_arrow_circle_up_24.xml b/app/src/main/res/drawable/ic_baseline_arrow_circle_up_24.xml
new file mode 100644
--- /dev/null	
+++ b/app/src/main/res/drawable/ic_baseline_arrow_circle_up_24.xml	
@@ -0,0 +1,10 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24"
+    android:tint="?attr/colorControlNormal">
+  <path
+      android:fillColor="@android:color/white"
+      android:pathData="M12,20c-4.41,0 -8,-3.59 -8,-8s3.59,-8 8,-8s8,3.59 8,8S16.41,20 12,20M12,22c5.52,0 10,-4.48 10,-10c0,-5.52 -4.48,-10 -10,-10C6.48,2 2,6.48 2,12C2,17.52 6.48,22 12,22L12,22zM11,12l0,4h2l0,-4h3l-4,-4l-4,4H11z"/>
+</vector>
